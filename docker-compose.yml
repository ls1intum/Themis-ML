version: '3.8'
 
services:
  # http://localhost:80/docs
  # http://localhost:80/
  feedback-suggestion:
    build:
      context: .
      dockerfile: ./feedback-suggestion/Dockerfile
    image: "harbor.ase.in.tum.de/ios2223cit/server:latest"
    container_name: "feedback-suggestion"
    depends_on:
      - database
    restart: always
    #ports:
    #  - "80:80"
    expose:
       - 8000
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    working_dir: /usr/src/app
    volumes:
      - './:/src'
    networks:
      - backend_network
    labels:
      - "traefik.enable=true"
      # The domain the service will respond to
      - "traefik.http.routers.feedback-suggestion.rule=Host(`localhost`) && PathPrefix(`/feedback_suggestions`)"
      # Allow request only from the predefined entry point named "web"
      - "traefik.http.routers.feedback-suggestion.entrypoints=web"
      # We need to define the service and specify, on which port our server is reachable
      - "traefik.http.services.feedback-suggestion-service.loadbalancer.server.port=8000"
      # We have to add this service to our router "feedback-suggestion". That's how the router knows where to forward the requests
      - "traefik.http.routers.feedback-suggestion.service=feedback-suggestion-service"

  inject-testing-data:
    build:
      context: .
      dockerfile: ./inject-testing-data/Dockerfile
    container_name: "inject-testing-data"
    depends_on:
      - database
    expose:
      - 8001
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    working_dir: /usr/src/app
    volumes:
      - './:/src'
    networks:
      - backend_network
    labels:
      - "traefik.enable=true"
      # The domain the service will respond to
      - "traefik.http.routers.inject-testing-data.rule=Host(`localhost`) && (Path(`/`) || PathPrefix(`/inject`))"
      # Allow request only from the predefined entry point named "web"
      - "traefik.http.routers.inject-testing-data.entrypoints=web"
      # We need to define the service and specify, on which port our server is reachable
      - "traefik.http.services.inject-testing-data-service.loadbalancer.server.port=8001"
      # We have to add this service to our router "inject-testing-data". That's how the router knows where to forward the requests
      - "traefik.http.routers.inject-testing-data.service=inject-testing-data-service"

  database:
    image: postgres:15.1-alpine
    container_name: database
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - '5432:5432'
    networks:
      - backend_network
    volumes:
      - database:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql

  # http://localhost:8080/dashboard
  traefik:
    container_name: "traefik"
    image: "traefik:v2.9"
    depends_on:
      - feedback-suggestion
      - inject-testing-data
    command:
      # Enable Debug output
      - "--log.level=DEBUG"
      # Enable the api and the traefik dashboard for debugging purposes, which can be reached under 127.0.0.1:8080
      - "--api.insecure=true"
      - "--api.dashboard=true"
      # Enabling docker provider
      - "--providers.docker=true"
      # Traefik will listen to incoming request on the port 80
      - "--entrypoints.web.address=:80"
    networks:
        - backend_network
    ports:
    # Port 8080 is where the api traefik dashboard is located
      - "8080:8080"
    # Port 80 is where our feedback-suggestion-service and inject-testing-data-service is running
      - "80:80"
    # Traefik needs the docker.sock to detect new docker container
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

volumes:
  database:
    driver: local

networks:
  backend_network:
    driver: bridge
    name: backend_network
